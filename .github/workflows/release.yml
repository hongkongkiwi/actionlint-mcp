name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          output="actionlint-mcp-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            output="${output}.exe"
          fi
          go build -ldflags="-s -w -X main.version=${VERSION}" -o "${output}" .
          
          # Create archive
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip "${output}.zip" "${output}" README.md LICENSE mcp.json install.sh
          else
            tar czf "${output}.tar.gz" "${output}" README.md LICENSE mcp.json install.sh
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: actionlint-mcp-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            actionlint-mcp-*.tar.gz
            actionlint-mcp-*.zip
          retention-days: 1

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            hongkongkiwi/actionlint-mcp
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-artifacts, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Get previous tag
        id: prev_tag
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^ 2>/dev/null || echo "")
          echo "current=${CURRENT_TAG}" >> $GITHUB_OUTPUT
          echo "previous=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          PREV_TAG=${{ steps.prev_tag.outputs.previous }}
          
          echo "# Release ${VERSION}" > release_notes.md
          echo "" >> release_notes.md
          echo "## What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "${PREV_TAG}" ]; then
            # Get commit messages between tags
            git log ${PREV_TAG}..${GITHUB_REF} --pretty=format:"- %s (%an)" >> release_notes.md
          else
            # First release - get all commits
            git log ${GITHUB_REF} --pretty=format:"- %s (%an)" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Using install script:" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo 'curl -sSL https://github.com/hongkongkiwi/actionlint-mcp/releases/download/'${VERSION}'/install.sh | bash' >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Using Docker:" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo 'docker pull hongkongkiwi/actionlint-mcp:'${VERSION} >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Manual installation:" >> release_notes.md
          echo "Download the appropriate binary for your platform from the assets below." >> release_notes.md
          echo "" >> release_notes.md
          echo "## Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "- \`hongkongkiwi/actionlint-mcp:${VERSION}\`" >> release_notes.md
          echo "- \`ghcr.io/hongkongkiwi/actionlint-mcp:${VERSION}\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Checksums" >> release_notes.md
          echo '```' >> release_notes.md
          cd artifacts && find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; | sed 's|./||g' >> ../release_notes.md
          cd ..
          echo '```' >> release_notes.md
          
          cat release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.prev_tag.outputs.current }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          generate_release_notes: false

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: create-release
    if: "!contains(github.ref, '-rc') && !contains(github.ref, '-beta') && !contains(github.ref, '-alpha')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Homebrew Formula
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Homebrew formula update would be triggered for version ${VERSION}"
          echo "This step would typically create a PR to homebrew-core or your tap"